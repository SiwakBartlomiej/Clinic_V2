// <auto-generated />
using System;
using Clinic_V3;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinic_V3.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250117014408_change gender from char to string")]
    partial class changegenderfromchartostring
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Clinic_V3.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("TEXT");

                    b.Property<int>("MedicalPersonnelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PatientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MedicalPersonnelId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("Clinic_V3.Models.MedicalPersonnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MedicalPersonnelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MedicalPersonnel");
                });

            modelBuilder.Entity("Clinic_V3.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Clinic_V3.Models.Appointment", b =>
                {
                    b.HasOne("Clinic_V3.Models.MedicalPersonnel", "MedicalPersonnel")
                        .WithMany()
                        .HasForeignKey("MedicalPersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinic_V3.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("MedicalPersonnel");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Clinic_V3.Models.Patient", b =>
                {
                    b.OwnsOne("Clinic_V3.Models.ContactInformation", "ContactInfo", b1 =>
                        {
                            b1.Property<int>("PatientId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");

                            b1.OwnsOne("Clinic_V3.Models.Address", "Address", b2 =>
                                {
                                    b2.Property<int>("ContactInformationPatientId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ContactInformationPatientId");

                                    b2.ToTable("Patient");

                                    b2.WithOwner()
                                        .HasForeignKey("ContactInformationPatientId");
                                });

                            b1.Navigation("Address")
                                .IsRequired();
                        });

                    b.Navigation("ContactInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
